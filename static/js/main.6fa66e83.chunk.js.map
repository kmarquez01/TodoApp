{"version":3,"sources":["logo.svg","Components/TodoForm.js","Components/Todo.js","Components/TodoList.js","TodoApp.js","reportWebVitals.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","handleInput","event","target","className","onSubmit","preventDefault","userId","id","Math","random","title","completed","ref","type","placeholder","name","onChange","icon","faX","onClick","faCheck","Todo","setTodos","todos","checkTodo","todo","setEdit","show","display","width","height","todoId","newTitle","test","updatedTodos","map","console","log","editItem","checked","style","fontStyle","textDecoration","faTrash","todoIndex","findIndex","task","filter","index","faEdit","TodoList","removeItem","addTodo","handleEditChange","TodoApp","hiddenAPI","sethiddenAPI","useEffect","axios","get","then","result","data","updatedTodo","addItem","revisedTodos","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"4KAAe,I,oBCwLAA,MAlLf,SAAkBC,GACd,MAA0BC,mBAASD,EAAME,KAAOF,EAAME,KAAKC,MAAQ,IAAnE,mBAAOC,EAAP,KAAcC,EAAd,KAEMC,EAAWC,iBAAO,MAExB,EAA0BN,oBAAS,GAAnC,mBAEA,GAFA,UAE0BA,oBAAS,IAAnC,mBAyFMO,GAzFN,UAyFoB,SAAAC,GAChBJ,EAASI,EAAMC,OAAOP,MACzB,GAMD,OACI,qBAAKQ,UAAY,sBAAjB,SAEI,sBAAMA,UAAY,YAAYC,SAlCjB,SAAAH,GACjBA,EAAMI,iBAENb,EAAMY,SAAS,CAEPE,OAAQ,EACRC,GAAIC,KAAKC,SACTC,MAAOd,EACPe,WAAW,IAOnBd,EAAS,GAGZ,EAgBO,SAECL,EAAME,KAEP,mCAGA,sBAAKS,UAAY,sBAAjB,UACI,uBACAS,IAAOd,EACPe,KAAO,OACPC,YAAc,aACdnB,MAASC,EACTmB,KAAO,QACPZ,UAAY,aACZa,SAAYhB,IAGZ,cAAC,IAAD,CAAiBiB,KAAMC,IAAKf,UAAY,gBAExCY,KAAO,KACPF,KAAM,SACNM,QAzFS,SAAAlB,GACjBA,EAAMI,iBAINb,EAAM2B,QAAQ,CAGNb,OAAQ,EACRC,GAAIC,KAAKC,SACTC,MAAO,GACPC,WAAW,IAgBnBd,EAAS,GAEZ,IAiEW,cAAC,IAAD,CAAiBoB,KAAMG,IAASjB,UAAY,eAC5CY,KAAO,MACPF,KAAM,SACNM,QAhIQ,SAAAlB,GAChBA,EAAMI,iBAINb,EAAM2B,QAAQ,CAGNb,OAAQ,EACRC,GAAIC,KAAKC,SACTC,MAAOd,EACPe,WAAW,IAgBnBd,EAAS,GAEZ,SAkHO,mCAEA,sBAAKM,UAAY,qBAAjB,UAEI,uBACIU,KAAO,OACPC,YAAc,aACdnB,MAASC,EACTmB,KAAO,QACPZ,UAAY,gBACZa,SAAYhB,IAMhB,wBAAQG,UAAY,aAAaU,KAAM,SAAvC,8BAQf,ECacQ,MA9Lf,YAAkD,IAAnCC,EAAkC,EAAlCA,SAAUC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,UAAWC,EAAM,EAANA,KAGvC,EAAwBhC,mBAAS,CAC7Bc,GAAI,KACJG,MAAO,GACPJ,OAAQ,EACRK,WAAW,IAJf,mBAAOjB,EAAP,KAAagC,EAAb,KA8CMC,EAAO,CACTC,QAAS,QACTC,MAAO,OACPC,OAAQ,QA0FZ,OAAGpC,EAAKa,GACG,cAAC,EAAD,CAAUb,KAAQA,EAAMyB,QA3Gd,SAAAT,IAxBJ,SAACqB,EAAQC,GACtB,GAAKA,EAAStB,QAAS,QAAQuB,KAAKD,EAAStB,OAA7C,CAIJ,IAAMwB,EAAe,YAAIX,GAAOY,KAAI,SAACV,GAAD,OAAWA,EAAKlB,KAAOwB,EAASC,EAAUP,CAA1C,IAUpCW,QAAQC,IAAIH,GAIZZ,EAASY,EAhBJ,CAiBF,CAKCI,CAAS5C,EAAKa,GAAIG,GAClBgB,EAAQ,CACJnB,GAAI,KACJG,MAAO,IAEd,IAyGD,qBAAKP,UAAY,aAAjB,SAEI,sBAAKA,UAAY,YAAjB,UACI,uBAAOU,KAAO,WAAW0B,QAAWd,EAAKd,UAAWK,SAAY,kBAAMQ,EAAUC,EAAhB,IAChE,mBAAGtB,UAAY,OAAOqC,MAASf,EAAKd,UA1G/B,CACT8B,UAAW,SACXC,eAAgB,gBAwG0C,KAAtD,SAA6DjB,EAAKf,QAElE,cAAC,IAAD,CAAiBO,KAAM0B,IACvBH,MAASf,EAAKd,UAAYgB,EAAM,CAACC,QAAS,QAC1CT,QApGW,SAAClB,GAChBA,EAAMI,iBACN,IAAMuC,EAAYrB,EAAMsB,WAAU,SAACC,GAAD,OAAUA,EAAKvC,KAAOkB,EAAKlB,EAA3B,IAC5B2B,EAAY,YAAOX,GAELW,EAAaU,GACrBA,GAAaV,EACzBZ,EAASY,EAAaa,QAAO,SAACC,GAAD,OAAWA,EAAMzC,KAAOkB,EAAKlB,EAA7B,KAC7B6B,QAAQC,IAAIH,GACZE,QAAQC,IAAIZ,EACf,EA2FOtB,UAAY,gBAOZ,cAAC,IAAD,CAAiBc,KAAOgC,IACxBT,MAASf,EAAKd,UAAYgB,EAAM,CAACC,QAAS,QAE1CT,QAAW,kBAAMO,EACb,CACAnB,GAAIkB,EAAKlB,GACTG,MAAOe,EAAKf,OAHL,EAQXP,UAAY,oBAcvB,E,iBChHc+C,MAvEf,YAAoG,IAA/E3B,EAA8E,EAA9EA,MAAOD,EAAuE,EAAvEA,SAAUE,EAA6D,EAA7DA,UAAoB2B,GAAyC,EAAlDC,QAAkD,EAAzCD,YAAYb,EAA6B,EAA7BA,SAElE,GAF+F,EAAnBe,iBAE1C5D,oBAAS,IAA3C,mBAwCA,OAxCA,UAyCI,qBAAKU,UAAY,WAAjB,SAGI,qBAAKA,UAAY,uBAAjB,SACCoB,EAAMY,KAAI,SAACV,GAAD,OAEP,cAAC,EAAD,CAAMH,SAAYA,EAClBC,MAASA,EACT4B,WAAcA,EACd3B,UAAaA,EACbC,KAAQA,EAERa,SAAYA,GADLb,EAAKlB,GAPL,OAsBtB,E,MC0Cc+C,MAjHf,WACI,MAAyB7D,mBAAS,MAAlC,mBAAM8B,EAAN,KAAaD,EAAb,KAEA,EAAkC7B,oBAAS,GAA3C,mBAAO8D,EAAP,KAAkBC,EAAlB,KAEAC,qBAAU,WACNC,IAAMC,IAAI,sDACJC,MAAK,SAACC,GACJvC,EAASuC,EAAOC,MAChB1B,QAAQC,IAAIwB,EAAOC,KAC1B,GAEJ,GAAE,IAGH,IAAMtC,EAAY,SAACC,GAchB,IAAMmB,EAAYrB,EAAMsB,WAAU,SAACC,GAAD,OAAUA,EAAKvC,KAAOkB,EAAKlB,EAA3B,IAC5B2B,EAAY,YAAOX,GAEnBwC,EAAc7B,EAAaU,GACjCmB,EAAYpD,WAAaoD,EAAYpD,UACrCoD,EAAYnB,GAAaV,EACzBZ,EAASY,GACTE,QAAQC,IAAI0B,EAEf,EAGKC,EAAU,SAACvC,GAGb,GAAIA,EAAKf,MAAT,CAGA,IAAMuD,EAAY,sBAAO1C,GAAP,CAAcE,IAEhCH,EAAS2C,GACT7B,QAAQC,IAAI4B,EAJX,CAKJ,EAsCA,OAGI,qBAAK9D,UAAY,aAAjB,SACI,sBAAKA,UAAY,YAAjB,UACI,oBAAIA,UAAY,QAAhB,uBAEA,qBAAKA,UAAY,kBAAjB,SAEI,wBAAQA,UAAY,WAAWgB,SAAyB,IAAdoC,EA/B1C,SAACtD,GACbA,EAAMI,iBACNkB,EAAM2C,OAAS,EACfV,GAAa,GACbpB,QAAQC,IAAId,EAIf,EAEiB,SAACtB,GACfA,EAAMI,iBACNqD,IAAMC,IAAI,sDACJC,MAAK,SAACC,GACJvC,EAASuC,EAAOC,MAChB1B,QAAQC,IAAIwB,EAAOC,KAC1B,IACDN,GAAa,GACbpB,QAAQC,IAAId,EAEf,EAWe,6BAEJ,cAAC,EAAD,CAAUA,MAASA,EAAOD,SAAYA,EAAUE,UAAaA,EAAWpB,SAAY4D,IACnFzC,EAAQ,cAAC,EAAD,CAAUD,SAAYA,EAAUC,MAASA,EAAOC,UAAaA,EAAWwC,QAAWA,IAAa,4CAUxH,EC3GcG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBT,MAAK,YAAkD,IAA/CU,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,EACT,GAEJ,ECFDO,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,SAM1BX,G","file":"static/js/main.6fa66e83.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {useState, useRef} from \"react\"\nimport TodoList from \"./TodoList\"\nimport Todo from \"./Todo\"\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\"\nimport {faCheck, faX} from \"@fortawesome/free-solid-svg-icons\"\n\nfunction TodoForm(props){\n    const [input, setInput] = useState(props.edit ? props.edit.value : \"\")\n\n    const inputRef = useRef(null)\n\n    const [error, setError] = useState(false)\n\n    const [state, setState] = useState(false)\n\n    const handleClick = event => {\n        event.preventDefault();\n\n\n    \n        props.onClick({\n\n            \n                userId: 1,\n                id: Math.random(),\n                title: input,\n                completed: false\n            \n                \n            \n        })\n\n\n\n        // if(props.edit.value == \"\"){\n            \n        //         setError(true)\n        //         console.log(\"test\")\n           \n        // }\n    \n\n        setInput(\"\")\n        \n    }\n\n    const handleClick1 = event => {\n        event.preventDefault();\n\n\n    \n        props.onClick({\n\n            \n                userId: 1,\n                id: Math.random(),\n                title: \"\",\n                completed: false\n            \n                \n            \n        })\n\n\n\n        // if(props.edit.value == \"\"){\n            \n        //         setError(true)\n        //         console.log(\"test\")\n           \n        // }\n    \n\n        setInput(\"\")\n        \n    }\n\n\n\n    const handleSubmit = event => {\n        event.preventDefault();\n\n        props.onSubmit({\n            \n                userId: 1,\n                id: Math.random(),\n                title: input,\n                completed: false\n                \n            \n        })\n        \n \n\n        setInput(\"\")\n\n        \n    }\n\n    \n\n\n    const handleInput = event => {\n        setInput(event.target.value)\n    }\n\n   \n\n    \n\n    return(\n        <div className = \"todo-form-container\">\n\n            <form className = \"todo-form\" onSubmit = {handleSubmit}>\n\n            {props.edit ? (\n            \n            <>\n\n\n            <div className = \"todo-edit-container\">\n                <input\n                ref = {inputRef} \n                type = \"text\"\n                placeholder = \"Enter item\"\n                value = {input}\n                name = \"title\"\n                className = \"enterField\"\n                onChange = {handleInput}\n                />\n\n                <FontAwesomeIcon icon={faX} className = \"editButtonYes\" \n\n                name = \"no\"\n                type =\"submit\" \n                onClick =  {handleClick1}\n                >\n        \n                </FontAwesomeIcon>\n                \n                <FontAwesomeIcon icon={faCheck} className = \"editButtonNo\" \n                name = \"yes\"\n                type =\"submit\" \n                onClick = {handleClick}>\n\n                </FontAwesomeIcon>\n\n                {/* {error?\n            <label>Invalid input</label>: \"test\"} */}\n                \n            </div>\n\n            \n            \n            </>\n\n            ) : (\n\n            <>\n            \n            <div className = \"todo-add-container\">\n            \n                <input \n                    type = \"text\"\n                    placeholder = \"Enter item\"\n                    value = {input}\n                    name = \"title\"\n                    className = \"enterAddField\"\n                    onChange = {handleInput}\n                \n                \n                \n                />\n                \n                <button className = \"sendButton\" type =\"submit\" >Add Item</button>\n                </div>\n            </>\n            \n            )}\n            </form>\n        </div>\n    )\n}\n\nexport default TodoForm","import {useState} from \"react\"\nimport TodoForm from \"./TodoForm\"\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\"\nimport {faTrash, faEdit} from \"@fortawesome/free-solid-svg-icons\"\n\nfunction Todo({setTodos, todos, checkTodo, todo}){\n\n\n    const [edit, setEdit] = useState({\n        id: null,\n        title: \"\",\n        userId: 1,\n        completed: false\n    })\n    \n\n\n    const editItem = (todoId, newTitle) => {\n        if (!newTitle.title || /^\\s*$/.test(newTitle.title)) {\n          return;\n        }\n\n    const updatedTodos = [...todos].map((todo) => (todo.id === todoId ? newTitle: todo))\n    \n    // {\n\n    //     if(todo.id === todoId){\n    //         todo.title = input\n    //     }\n    //     return todo\n    // });\n\n    console.log(updatedTodos)\n    \n        // setTodos(prev => prev.map(item => (item.id === todoId ? newTitle : item)));\n\n    setTodos(updatedTodos)\n      };\n\n\n\n    const submitUpdate = title => {\n        editItem(edit.id, title)\n        setEdit({\n            id: null,\n            title: ''\n        })\n    }\n    \n\n    const done = {\n        fontStyle: \"normal\",\n        textDecoration: \"line-through\"\n    }\n    const show = {\n        display: 'block',\n        width: '50px',\n        height: '20px'\n    }\n\n    const removeItem = (event) => {\n        event.preventDefault();\n        const todoIndex = todos.findIndex((task) => task.id === todo.id)\n        const updatedTodos = [...todos];\n\n        const updatedTodo = updatedTodos[todoIndex];\n        updatedTodo[todoIndex] = updatedTodos\n        setTodos(updatedTodos.filter((index) => index.id !== todo.id)); \n        console.log(updatedTodos)\n        console.log(todo)\n    }\n\n    // const editItem = (id) => {\n\n\n    // const todoIndex = todos.findIndex((task) => task.id === todo.id)\n\n    \n    // // console.log(todoIndex)\n    // const updatedTodos = [...todos].map((todo) => {\n\n    //     if(todo.id === id){\n    //         todo.title = input\n    //     }\n    //     return todo\n    // });\n\n    // // const updatedTodo = updatedTodos[todoIndex]\n\n    // // setTodos(updatedTodo)\n\n    // // const updatedTodo = updatedTodos[todoIndex]\n\n\n    // // console.log(updatedTodo)\n\n    // // //setTodos(updatedTodo)\n\n\n    // // console.log(updatedTodo)\n\n    // // console.log(updatedTodos)\n      \n    // }\n\n\n\n\n    // const editItem = (todoId, newValue) => {\n\n    //     setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item)))\n\n    // }\n\n    // const editItem = (event) => {\n\n    //     event.preventDefault();\n\n    //     // reviseTodo(edit.id, title)\n        \n\n    //     const todoIndex = todos.findIndex((task) => task.id === todo.id)\n\n    //     setEdit(\n    //             {id: todoIndex, \n    //              title: \"test\", \n    //              userId: todoIndex.userId, \n    //              completed: todoIndex.compelted})\n\n    //     // const newTodo = todoIndex.title\n\n    //     const updatedTodos = [...todos];\n\n    //     const updatedTodo = updatedTodos[todoIndex];\n    //     updatedTodo[todoIndex] = updatedTodos\n\n    //     // updatedTodos = [...todos, newTodo]\n\n    //     // setTodos(updatedTodos.filter((index) => index.id == todo.id));\n\n    //     setTodos(prev => prev.map(item => (item.id === todo.id ? todo.title : item)))\n        \n\n    //     console.log(updatedTodos)\n        \n    // }\n\n    if(edit.id){\n        return <TodoForm edit = {edit} onClick = {submitUpdate} />\n    }\n\n    return (\n    <div className = \"todoHolder\">\n    \n        <div className = \"todoItems\">\n            <input type = \"checkbox\" checked = {todo.completed} onChange = {() => checkTodo(todo)} />\n            <p className = \"task\" style = {todo.completed ? done: null}>{todo.title}</p>\n            \n            <FontAwesomeIcon icon={faTrash}\n            style = {todo.completed ? show: {display: 'none'}}\n            onClick = {removeItem}\n            className = \"garbage-can\"\n            >\n            </FontAwesomeIcon>\n            \n            \n\n            \n            <FontAwesomeIcon icon= {faEdit}\n            style = {todo.completed ? show: {display: 'none'}}\n            //onClick = {() => handleEditChange(todo.id, todo.text)}\n            onClick = {() => setEdit(\n                {\n                id: todo.id, \n                title: todo.title\n                \n                }\n                )}\n                            \n            className = \"garbage-can\"\n        \n            >\n            \n            </FontAwesomeIcon>\n\n            \n            \n        \n                \n         </div>\n\n    </div>\n    )\n}\n\nexport default Todo","import Todo from \"./Todo\"\n\nimport TodoForm from \"./TodoForm\"\n\nimport {useEffect, useState} from \"react\"\n\nimport axios from \"axios\"\n\n\n\nfunction TodoList ({ todos, setTodos, checkTodo, addTodo, removeItem, editItem, handleEditChange}) {\n\n    const [hiddenAPI, sethiddenAPI] = useState(true)\n\n \n\n    const show = {\n        display: 'block',\n        width: '50px',\n        height: '20px'\n    }\n\n    // const hideAPI = (event) => {\n    //     event.preventDefault();\n    //     todos.length = 0\n    //     sethiddenAPI(false)\n    //     console.log(todos)\n\n        \n \n    // }\n\n    // const revealAPI = (event) => {\n    //     event.preventDefault();\n    //     axios.get(\"https://jsonplaceholder.typicode.com/users/1/todos\")\n    //          .then((result) => {\n    //             setTodos(result.data)\n    //             console.log(result.data)\n    //     });\n    //     sethiddenAPI(true)\n    //     console.log(todos)\n\n    // }\n\n    // const reviseTodo = (todoId, newValue) => {\n    //     if(!newValue.title){\n    //         return;\n    //     }\n    //    setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item)))\n    // }\n\n\n    return (\n        <div className = \"todoList\">\n         {/* <form className = \"todoList\"> */}\n            \n            <div className = \"todo-items-container\">\n            {todos.map((todo) => (\n                \n                <Todo setTodos = {setTodos} \n                todos = {todos} \n                removeItem = {removeItem}\n                checkTodo = {checkTodo} \n                todo = {todo}\n                key = {todo.id} \n                editItem = {editItem}\n                \n                \n                 />\n                \n            ))}\n\n            </div>\n\n\n        {/* </form> */}\n        </div>\n        \n    );\n};\n\nexport default TodoList","import logo from './logo.svg';\nimport TodoList from \"./Components/TodoList\"\nimport TodoForm from \"./Components/TodoForm\"\nimport \"./styledelements.css\"\nimport React, { useState, useEffect } from \"react\";\nimport axios from 'axios';\n\n\nfunction TodoApp(){\n    const[todos, setTodos] = useState(null);\n\n    const [hiddenAPI, sethiddenAPI] = useState(true)\n\n    useEffect(() => {\n        axios.get(\"https://jsonplaceholder.typicode.com/users/1/todos\")\n             .then((result) => {\n                setTodos(result.data)\n                console.log(result.data)\n        });\n        \n    }, [])\n\n\n    const checkTodo = (todo) => {\n        \n         \n        /*todos.map(todo => {\n           if(todo.id === id){\n               todo.completed = !todo.completed\n           }\n           return todo\n       })\n       setTodos(todoUpdated)\n       console.log(todoUpdated) */\n\n     \n       \n       const todoIndex = todos.findIndex((task) => task.id === todo.id)\n       const updatedTodos = [...todos];\n\n       const updatedTodo = updatedTodos[todoIndex];\n       updatedTodo.completed =! updatedTodo.completed;\n       updatedTodo[todoIndex] = updatedTodos\n       setTodos(updatedTodos); \n       console.log(updatedTodo)\n       \n   }\n\n\n   const addItem = (todo) => {\n\n       \n       if(!todo.title){\n           return;\n       }\n       const revisedTodos = [...todos, todo]\n\n       setTodos(revisedTodos)\n       console.log(revisedTodos)\n   }\n\n    /*\n    const deleteAll = (todo) => {\n        event.preventDefault();\n        const todoIndex = todos.findIndex((task) => task.id === todo.id)\n        const updatedTodos = [...todos];\n\n        const updatedTodo = updatedTodos[todoIndex];\n        updatedTodo[todoIndex] = updatedTodos\n        setTodos(updatedTodos.filter((index) => index.id !== todo.id)); \n        console.log(updatedTodos)\n        console.log(todo)\n    }\n\n    */\n    const hideAPI = (event) => {\n        event.preventDefault();\n        todos.length = 0\n        sethiddenAPI(false)\n        console.log(todos)\n\n        \n \n    }\n\n    const revealAPI = (event) => {\n        event.preventDefault();\n        axios.get(\"https://jsonplaceholder.typicode.com/users/1/todos\")\n             .then((result) => {\n                setTodos(result.data)\n                console.log(result.data)\n        });\n        sethiddenAPI(true)\n        console.log(todos)\n\n    }\n\n    return(\n\n        \n        <div className = \"background\">\n            <div className = \"container\">\n                <h1 className = \"title\">Todo List</h1>\n\n                <div className = \"buttoncontainer\">\n\n                    <button className = \"showmore\" onClick = {hiddenAPI === true ? hideAPI : revealAPI}>Hide/Show API</button>\n                </div>\n                <TodoForm todos = {todos} setTodos = {setTodos} checkTodo = {checkTodo} onSubmit = {addItem}/>\n                {todos ? <TodoList setTodos = {setTodos} todos = {todos} checkTodo = {checkTodo} addItem = {addItem}/> : <div>Hello</div> }\n            \n            </div>\n        </div>\n    \n        /*\n        <TodoContainer />\n\n        */\n    )\n}\n\nexport default TodoApp","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport TodoApp from './TodoApp';\nimport reportWebVitals from './reportWebVitals';\n\n\n\n\nReactDOM.render(\n    <TodoApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}